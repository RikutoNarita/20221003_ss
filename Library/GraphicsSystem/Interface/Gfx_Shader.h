//==============================================================================
// Filename: Gfx_Shader.h
// Description: シェーダーの基底クラス
// Copyright (C) Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================

// インクルードガード
#ifndef __SHADER_H__
#define __SHADER_H__

// インクルード
#include <GraphicsSystem\Interface\Gfx_GrapicsObjectBase.h>
#include <GraphicsSystem\Interface\Gfx_Tag.h>
#include <wrl\client.h>
#include <d3dcompiler.h>

class GfxConstantBuffer;
class GfxTexture;

// クラス定義
class GfxShader : public GfxGraphicsObject<GfxShader>
{
public:
    enum class KIND
    {
        KIND_VS,
        KIND_PS,
    };

public:
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] shader
    /// 
    /// \return void
    //------------------------------------------------------------------------------
    GfxShader(KIND kind);

    //------------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //------------------------------------------------------------------------------
    virtual ~GfxShader();

    //------------------------------------------------------------------------------
    /// シェーダーのコンパイル
    /// 
    /// \param[in] tag      リソースに紐づけるタグ
    /// \param[in] kind     シェーダーの種類
    /// \param[in] filename 読み込むシェーダーのパス
    ///
    /// \return このクラスのポインタ
    //------------------------------------------------------------------------------
    static GfxShader::Ptr Compile(
    /*[in]*/
    const GfxTag& tag,
    /*[in]*/
    const KIND& kind,
    /*[in]*/
    const wchar_t* fileName);

    //------------------------------------------------------------------------------
    /// シェーダーに定数バッファをセットする
    /// 
    /// \param[in] pConstantBuffer  定数バッファ
    /// \param[in] slot             レジスタ番号
    ///
    /// \return void
    //------------------------------------------------------------------------------
    void SetBuffer(
    /*[in]*/
    GfxConstantBuffer* pConstantBuffer,
    /*[in]*/
    unsigned int slot);

    //------------------------------------------------------------------------------
    /// シェーダーにテクスチャをセットする
    /// 
    /// \param[in] pTex テクスチャ
    /// \param[in] slot レジスタ番号
    ///
    /// \return void
    //------------------------------------------------------------------------------
    void SetTexture(
    /*[in]*/
    GfxTexture* pTex,
    /*[in]*/
    unsigned int slot);

    //------------------------------------------------------------------------------
    /// シェーダーのポインタの取得
    /// 
    /// \return シェーダーのポインタ
    //------------------------------------------------------------------------------
    ID3DBlob* GetBlob() const
    {
        return m_pBlob.Get();
    }

    //------------------------------------------------------------------------------

protected:
    //------------------------------------------------------------------------------
    static const int MAX_BUFFER = 4;
    KIND m_kind;
    GfxConstantBuffer* m_buffers[MAX_BUFFER];
    GfxTexture* m_textures[MAX_BUFFER];
    Microsoft::WRL::ComPtr<ID3DBlob> m_pBlob;
    //------------------------------------------------------------------------------
    /// <summary>
    /// MAX_BUFFER  定数バッファ、テクスチャの最大セット数
    /// m_kind      シェーダーの種類
    /// m_buffers   定数バッファ
    /// m_textures  テクスチャ
    /// m_pBlob     シェーダーのポインタ
    /// </summary> 
};

class GfxVertexShader : public GfxShader
{
public:
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] shader シェーダーの種類
    /// 
    /// \return void
    //------------------------------------------------------------------------------
    GfxVertexShader(KIND kind);

    //------------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //------------------------------------------------------------------------------
    virtual ~GfxVertexShader();

    //------------------------------------------------------------------------------
};

class GfxPixelShader : public GfxShader
{
public:
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] shader シェーダーの種類
    /// 
    /// \return void
    //------------------------------------------------------------------------------
    GfxPixelShader(KIND kind);

    //------------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //------------------------------------------------------------------------------
    virtual ~GfxPixelShader();

    //------------------------------------------------------------------------------
};

#endif // __SHADER_H__
