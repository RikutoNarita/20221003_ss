//==============================================================================
// Filename: Platform_Windows_Impl.h
// Description: ウィンドウ表示クラス
// Copyright (C) 2013 Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================

// インクルードガード
#ifndef __WINDOW_H__
#define __WINDOW_H__

// インクルード
#include <IPlatform.h>
#include <Windows.h>

// マクロ定義
#define WINDOW (PlatformWindows::Get())           // クラスのインスタンス取得

// クラス定義
class PlatformWindows : public IPlatform
{
public:
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    /// コンストラクタ
    /// 
    /// \return void
    //------------------------------------------------------------------------------
    PlatformWindows();

    //------------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //------------------------------------------------------------------------------
    ~PlatformWindows();

    //------------------------------------------------------------------------------
    /// クラスのインスタンス取得
    ///
    /// \return クラスのインスタンス
    //------------------------------------------------------------------------------
    static PlatformWindows* Get()
    {
        return dynamic_cast<PlatformWindows*>(m_pPlatform.get());
    }

    //------------------------------------------------------------------------------
    /// 初期化
    /// 
    /// \param[in] desc プラットフォームの設定項目
    /// 
    /// \return 成功時 true
    //------------------------------------------------------------------------------
    bool Init(
        /*[in]*/
        Description desc) final;

    //------------------------------------------------------------------------------
    /// メッセージループ
    /// 
    /// \return 
    //------------------------------------------------------------------------------
    bool Run() final;

    //------------------------------------------------------------------------------
    /// ウィンドウハンドルの取得
    /// 
    /// \return ウィンドウハンドル
    //------------------------------------------------------------------------------
    HWND GetWndHandle();

    //------------------------------------------------------------------------------
    /// インスタンスハンドルの取得
    /// 
    /// \return ウィンドウハンドル
    //------------------------------------------------------------------------------
    //HINSTANCE GetInstance();

    

    //------------------------------------------------------------------------------

private:
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    /// 終了処理
    ///
    /// \return void
    //------------------------------------------------------------------------------
    void Uninit();

    //------------------------------------------------------------------------------
    /// WM_CREATEメッセージハンドラ
    /// 
    /// \param[in] hWnd ウィンドウハンドル
    /// 
    /// \return 成功時 0
    //------------------------------------------------------------------------------
    int OnCreate(
        /*[in]*/
        HWND hWnd
    );

    //------------------------------------------------------------------------------
    /// ウィンドウプロシージャ
    /// 
    /// \param[in] hWnd ウィンドウハンドル
    /// \param[in] uMsg 
    /// \param[in] wParam 
    /// \param[in] lParam 
    /// 
    /// \return コールバック関数やウィンドウプロシージャから返される32ビットの値
    //------------------------------------------------------------------------------
    static LRESULT CALLBACK WndProc(
        /*[in]*/
        HWND hWnd,
        /*[in]*/
        UINT uMsg,
        /*[in]*/
        WPARAM wParam,
        /*[in]*/
        LPARAM lParam);

    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    HWND m_hWnd;
    HINSTANCE m_hInst;

    // フレームカウント初期化
    DWORD dwExecLastTime, dwFPSLastTime, dwCurrentTime, dwFrameCount;
    
    //------------------------------------------------------------------------------
    /// <summary>
    /// m_hWnd    ウィンドウハンドル
    /// m_hInst   インスタンスハンドル
    /// </summary>
};

#endif // !__WINDOW_H__
