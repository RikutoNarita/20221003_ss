//==============================================================================
// Filename: 
// Description: 
// Copyright (C) Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================


class
{

    //---------------------------------------------------------------------------
    // list of friend classes and methods. 

    //---------------------------------------------------------------------------

public:

    //---------------------------------------------------------------------------
    // public methods

    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // public variables 

    //---------------------------------------------------------------------------
    ///< 
protected:

    //---------------------------------------------------------------------------
    // protected methods.

    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // protected variables.

    //---------------------------------------------------------------------------
    ///< 
private:

    //---------------------------------------------------------------------------
    // private methods.

    //---------------------------------------------------------------------------
    

    //---------------------------------------------------------------------------
    // private variables.

    //---------------------------------------------------------------------------
    ///< 
};



//------------------------------------------------------------------------------
/// Compute directional light's position and bound box in viewspace
///
/// \param[out] bboxInView Light bounding box in view space
/// \param[out] lightPos Light position to place directional light(in world space)
/// \param[out] viewMat View matrix for this light
/// \param[out] minP Minimum point in bound box in viewspace
/// \param[out] maxP Maximum point in bound box in viewspace
/// \param[out] fNear Near plane to use for this directional light
/// \param[out] fFar Far plane to use for this directional light
///
/// \return True on success
//------------------------------------------------------------------------------
SI_BOOL SiSceneViewInfo::ComputeDirectionalLightBBoxAndPosition(
    /*[out]*/
    SiMathBoundBoxf& bboxInView,
    /*[out]*/
    SiMathVector3Df& lightPos,
    /*[out]*/
    SiMathMatrix4x4f& viewMat,
    /*[out]*/
    SiMathVector3Df& minP,
    /*[out]*/
    SiMathVector3Df& maxP,
    /*[out]*/ SI_FLOAT
    & fNear,
    /*[out]*/ SI_FLOAT
    & fFar)





class WinErrorOutput : public std::exception
{
public:

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] nLine    エラーの発生位置（何行目）
    /// \param[in] chFile   エラーが発生したファイル名
    ///
    /// \return void
    //--------------------------------------------------------------------------
    WinErrorOutput(
        /*[in]*/ int nLine,
        /*[in]*/ const char* chFile) noexcept;

    //--------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    ~WinErrorOutput() noexcept override;

    //--------------------------------------------------------------------------
    /// エラータイプ取得
    ///
    /// \return エラータイプの文字列
    //--------------------------------------------------------------------------
    virtual const char* GetErrorType() const noexcept;

    //--------------------------------------------------------------------------
    /// エラー情報取得
    ///
    /// \return エラー情報の文字列
    //--------------------------------------------------------------------------
    std::string GetErrorInfo() const noexcept;

    //--------------------------------------------------------------------------
    /// エラー情報出力
    ///
    /// \return まとめたエラー情報の文字列
    //--------------------------------------------------------------------------
    const char* what() const noexcept override;

    //--------------------------------------------------------------------------

private:

    //--------------------------------------------------------------------------
    int m_line;
    std::string m_file;
    //--------------------------------------------------------------------------

    /// <summary>
    /// m_line  エラーの発生位置（何行目）
    /// m_file  エラーが発生したファイル名
    /// </summary>

protected:

    //--------------------------------------------------------------------------
    mutable std::string m_infoBuffer;
    //--------------------------------------------------------------------------

    /// <summary>
    /// m_infoBuffer    エラー情報格納用バッファ
    /// </summary>
};